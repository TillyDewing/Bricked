using UnityEngine;
using System.Collections;
using System.Collections.Generic;
public class Chuck : MonoBehaviour 
{
	public byte[,,] blockType;
	public int chunkX;
	public int chunkY;
	public int chunkZ;

	private List<Vector3> newVertices = new List<Vector3>();
	private List<int> newTriangles = new List<int>();
	private List<Vector2> newUV = new List<Vector2>();

	private float tUnit = 0.25f;
	private Vector2 tStone = new Vector2 (1, 0);
	private Vector2 tGrass = new Vector2 (0, 1);
	private Vector2 tGrassTop = new Vector2 (1, 1);

	private Mesh mesh;
	private MeshCollider col;

	int faceCount;

	public int Biome = 0;

	void Start()
	{
		blockType = new byte[chunkX, chunkY, chunkZ];
		if(Biome == 0)
		{
			for(int x = 0; x < chunkX; x++)
			{

				for(int y = 0; y < chunkY; y++)
				{
					for(int z = 0; z < chunkZ; z++)
					{
						if(y < 8)
						{
							blockType[x,y,z] = 2;

						}
						if(x == 8)
						{
							blockType[x,y,z] = 1;
							
						}
						
					}
				}
			}
		}
		

		mesh = GetComponent<MeshFilter> ().mesh;
		col = GetComponent<MeshCollider> ();

		GenerateMesh ();
		UpdateMesh ();

	}
	void CubeTop (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x,  y,  z + 1));
		newVertices.Add(new Vector3 (x + 1, y,  z + 1));
		newVertices.Add(new Vector3 (x + 1, y,  z ));
		newVertices.Add(new Vector3 (x,  y,  z ));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrassTop;
		}
		
		Cube (texturePos);
		
	}
	
	void CubeNorth (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x + 1, y-1, z + 1));
		newVertices.Add(new Vector3 (x + 1, y, z + 1));
		newVertices.Add(new Vector3 (x, y, z + 1));
		newVertices.Add(new Vector3 (x, y-1, z + 1));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrass;
		}
		
		Cube (texturePos);
		
	}
	
	void CubeEast (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x + 1, y - 1, z));
		newVertices.Add(new Vector3 (x + 1, y, z));
		newVertices.Add(new Vector3 (x + 1, y, z + 1));
		newVertices.Add(new Vector3 (x + 1, y - 1, z + 1));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrass;
		}
		
		Cube (texturePos);
		
	}
	
	void CubeSouth (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x, y - 1, z));
		newVertices.Add(new Vector3 (x, y, z));
		newVertices.Add(new Vector3 (x + 1, y, z));
		newVertices.Add(new Vector3 (x + 1, y - 1, z));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrass;
		}
		
		Cube (texturePos);
		
	}
	
	void CubeWest (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x, y- 1, z + 1));
		newVertices.Add(new Vector3 (x, y, z + 1));
		newVertices.Add(new Vector3 (x, y, z));
		newVertices.Add(new Vector3 (x, y - 1, z));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrass;
		}
		
		Cube (texturePos);
		
	}
	
	void CubeBot (int x, int y, int z) {
		
		newVertices.Add(new Vector3 (x,  y-1,  z ));
		newVertices.Add(new Vector3 (x + 1, y-1,  z ));
		newVertices.Add(new Vector3 (x + 1, y-1,  z + 1));
		newVertices.Add(new Vector3 (x,  y-1,  z + 1));
		
		Vector2 texturePos=new Vector2(0,0);
		
		if(blockType[x,y,z]==1){
			texturePos=tStone;
		} else if(blockType[x,y,z]==2){
			texturePos=tGrass;
		}
		
		Cube (texturePos);
		
	}
	
	void Cube (Vector2 texturePos) {
		
		newTriangles.Add(faceCount * 4  ); //1
		newTriangles.Add(faceCount * 4 + 1 ); //2
		newTriangles.Add(faceCount * 4 + 2 ); //3
		newTriangles.Add(faceCount * 4  ); //1
		newTriangles.Add(faceCount * 4 + 2 ); //3
		newTriangles.Add(faceCount * 4 + 3 ); //4
		
		newUV.Add(new Vector2 (tUnit * texturePos.x + tUnit, tUnit * texturePos.y));
		newUV.Add(new Vector2 (tUnit * texturePos.x + tUnit, tUnit * texturePos.y + tUnit));
		newUV.Add(new Vector2 (tUnit * texturePos.x, tUnit * texturePos.y + tUnit));
		newUV.Add(new Vector2 (tUnit * texturePos.x, tUnit * texturePos.y));
		
		faceCount++; // Add this line
	}

	void UpdateMesh ()
	{
		
		mesh.Clear ();
		mesh.vertices = newVertices.ToArray();
		mesh.uv = newUV.ToArray();
		mesh.triangles = newTriangles.ToArray();
		mesh.Optimize ();
		mesh.RecalculateNormals ();
		
		col.sharedMesh=null;
		col.sharedMesh=mesh;
		
		newVertices.Clear();
		newUV.Clear();
		newTriangles.Clear();
		
		faceCount=0; //Fixed: Added this thanks to a bug pointed out by ratnushock!
		
	}

	void GenerateMesh()
	{
		for(int x = 0; x < chunkX; x++)
		{
			for(int y = 0; y < chunkY; y++)
			{
				for(int z = 0; z < chunkZ; z++)
				{
					if(x > 0)
					{
						if(blockType[x,y,z] !=0)
						{
							if(blockType[x - 1,y,z] ==0)
							{
								CubeWest (x,y,z);

							}
						}
					}
					if(x < chunkX - 1)
					{
						if(blockType[x,y,z] !=0)
						{
							if(blockType[x + 1,y,z] ==0)
							{
								CubeEast (x,y,z);
							}
						}
					}
					if(y > 0)
					{
							if(blockType[x,y,z] !=0)
							{
								if(blockType[x,y - 1,z] ==0)
								{
									CubeBot (x,y,z);
								}
							}
					}
					if(y < chunkY - 1)
					{
							if(blockType[x,y,z] !=0)
							{
								if(blockType[x,y + 1,z] ==0)
								{
									CubeTop (x,y,z);
								}
							}
					}
					if(z > 0)
					{
							if(blockType[x,y,z] !=0)
							{
								if(blockType[x,y,z - 1] ==0)
								{
									CubeSouth (x,y,z);
								}
							}
					}
					if(z < chunkZ - 1)
					{
							if(blockType[x,y,z] !=0)
							{
								if(blockType[x,y,z + 1] ==0)
								{
									CubeNorth (x,y,z);
								}
							}
					}
				}
			}
		}
	}
	}
